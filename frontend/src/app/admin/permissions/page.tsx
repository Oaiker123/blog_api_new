"use client";

import { useState, useEffect } from "react";
import { api } from "@/lib/api";
import { ChevronDown, ChevronUp } from "lucide-react";
import axios from "axios"; // ‚úÖ C·∫ßn import axios ƒë·ªÉ d√πng axios.isAxiosError
import { toast } from "sonner";

interface Permission {
  id: number;
  name: string;
}

interface User {
  id: number;
  name: string;
  email: string;
  permissions: Permission[];
}

export default function PermissionsPage() {
  const [usersData, setUsersData] = useState<User[]>([]);
  const [permissionsData, setPermissionsData] = useState<Permission[]>([]);
  const [expandedUser, setExpandedUser] = useState<number | null>(null);

  // üß† L·∫•y d·ªØ li·ªáu user + permission
  const fetchData = async () => {
    try {
      const usersRes = await api.get("/admin/users");
      const permsRes = await api.get("/admin/permissions");

      console.log("usersData:", usersRes.data);
      console.log("permissionsData:", permsRes.data);

      const usersArray = Array.isArray(usersRes.data)
        ? usersRes.data
        : usersRes.data.users;

      const permsArray = Array.isArray(permsRes.data)
        ? permsRes.data
        : permsRes.data.permissions;

      setUsersData(usersArray || []);
      setPermissionsData(permsArray || []);
    } catch (error) {
      console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
      toast.error("L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng/quy·ªÅn. Vui l√≤ng ki·ªÉm tra console.");
    }
  };

  useEffect(() => {
    fetchData();
  }, []);
  
  // üîÑ H√†m c·∫≠p nh·∫≠t state Users
  const updateUsersState = (updatedUser: User) => {
    setUsersData(prevUsers => 
        prevUsers.map(user => 
            user.id === updatedUser.id ? updatedUser : user
        )
    );
  };

  // üß© H√†m g√°n/g·ª° quy·ªÅn
  const handlePermissionChange = async (
    userId: number,
    permissionName: string,
    hasPermission: boolean // ‚úÖ Th√™m tham s·ªë tr·∫°ng th√°i hi·ªán t·∫°i
  ) => {
    // 1. X√°c ƒë·ªãnh URL v√† ph∆∞∆°ng th·ª©c
    const url = `/admin/users/${userId}/permissions`;
    // N·∫øu ch∆∞a c√≥ quy·ªÅn: G√°n (POST). N·∫øu ƒë√£ c√≥ quy·ªÅn: G·ª° (DELETE).
    // Tuy nhi√™n, logic UI c·ªßa b·∫°n ch·ªâ cho ph√©p b·∫•m khi `!hasPermission` (ch∆∞a c√≥ quy·ªÅn)
    // ƒê·ªÉ ti·ªán cho vi·ªác th√™m logic g·ª° quy·ªÅn sau n√†y, ta n√™n ƒë·ªïi check.
    // D·ª±a tr√™n UI, ta ch·ªâ g·ªçi h√†m n√†y khi CH∆ØA c√≥ quy·ªÅn. N·∫øu mu·ªën g·ª° quy·ªÅn,
    // ta c·∫ßn s·ª≠a disabled logic.

    // üí° T·∫°m th·ªùi, m√¨nh ch·ªâ l√†m logic G√ÅN quy·ªÅn (POST), v√¨ checkbox c·ªßa b·∫°n ƒëang disabled khi ƒë√£ c√≥ quy·ªÅn.
    // N·∫øu b·∫°n mu·ªën G·ª† quy·ªÅn, b·∫°n ph·∫£i s·ª≠a l·∫°i thu·ªôc t√≠nh `disabled` c·ªßa <input> b√™n d∆∞·ªõi.

    try {
      // ‚öôÔ∏è G·ªçi API g√°n quy·ªÅn
      const response = await api.post(url, {
        permission: permissionName, // G·ª≠i l√™n m·ªôt string t√™n l√† "permission"
      });

      // ‚úÖ X·ª≠ l√Ω th√†nh c√¥ng
      if (response.status === 200) {
        toast.success(response.data.message || "G√°n quy·ªÅn th√†nh c√¥ng!");
        
        // C·∫≠p nh·∫≠t state tr·ª±c ti·∫øp n·∫øu backend tr·∫£ v·ªÅ data user ƒë√£ c·∫≠p nh·∫≠t
        if (response.data.user) {
            updateUsersState(response.data.user);
        } else {
            // Tr∆∞·ªùng h·ª£p backend kh√¥ng tr·∫£ v·ªÅ user ƒë·∫ßy ƒë·ªß, g·ªçi l·∫°i API
            fetchData();
        }
      }
    } catch (error) {
      // ‚úÖ X·ª≠ l√Ω th·∫•t b·∫°i (403, 422, 500)
      let errorMessage = "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.";
      
      if (axios.isAxiosError(error) && error.response) {
        const { status, data } = error.response;
        
        if (status === 403) {
            errorMessage = data.message || "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.";
        } else if (status === 422) {
            errorMessage = data.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.";
            // B·∫°n c√≥ th·ªÉ x·ª≠ l√Ω error.response.data.errors n·∫øu c·∫ßn hi·ªÉn th·ªã validation chi ti·∫øt
        } else if (status === 500) {
             errorMessage = data.message || "L·ªói Server n·ªôi b·ªô (500).";
        } else {
            errorMessage = data.message || `L·ªói ${status}.`;
        }
      }

      toast.error(`TH·∫§T B·∫†I: ${errorMessage}`);
      console.error("L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn:", error);
    }
  };
  
  // üö© H√†m x·ª≠ l√Ω cho checkbox: B·∫•m v√†o th√¨ G√°n/G·ª°
  const handleCheckboxChange = (
    user: User, 
    perm: Permission, 
    hasPermission: boolean
  ) => {
    // Super Admin kh√¥ng l√†m g√¨ c·∫£
    if (user.email === "admin@gmail.com") return;
    
    if (!hasPermission) {
        // N·∫øu ch∆∞a c√≥ quy·ªÅn -> G√ÅN (POST)
        handlePermissionChange(user.id, perm.name, false);
    } else {
        // N·∫øu ƒê√É c√≥ quy·ªÅn -> G·ª† (DELETE)
        // üî• L∆ØU √ù: N·∫øu b·∫°n mu·ªën G·ª† quy·ªÅn, b·∫°n ph·∫£i B·∫¨T thu·ªôc t√≠nh `disabled` c·ªßa <input>
        // v√† thay th·∫ø `handlePermissionChange` b·∫±ng logic DELETE.
        // Hi·ªán t·∫°i, logic UI c·ªßa b·∫°n ƒëang kh√¥ng cho ph√©p g·ª° quy·ªÅn (disabled={hasPermission})
        
        // T·∫†M TH·ªúI: N·∫øu b·∫°n ch·ªâ mu·ªën G√ÅN, kh√¥ng c·∫ßn s·ª≠a g√¨ th√™m.
        // N·∫øu mu·ªën G·ª†, h√£y s·ª≠a d√≤ng `disabled` b√™n d∆∞·ªõi.
        
        // N·∫øu b·∫°n ƒë√£ s·ª≠a logic UI ƒë·ªÉ cho ph√©p G·ª† quy·ªÅn, ƒë√¢y l√† c√°ch g·ªçi G·ª†:
        // handleRevokePermission(user.id, perm.name); 
    }
  };

  return (
    <div className="p-4 md:p-6 max-w-4xl mx-auto">
      <h2 className="text-xl font-semibold mb-4">Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng</h2>

      {usersData.map((user) => {
        const isSuperAdmin = user.email === "admin@gmail.com";

        return (
          <div
            key={user.id}
            className="border rounded-2xl p-4 mb-3 shadow-sm bg-white transition-all"
          >
            {/* Header user */}
            <div
              className="flex items-center justify-between cursor-pointer"
              onClick={() =>
                setExpandedUser(expandedUser === user.id ? null : user.id)
              }
            >
              <div>
                <p className="font-semibold text-gray-800">{user.name}</p>
                <p className="text-gray-500 text-sm">{user.email}</p>
              </div>
              {expandedUser === user.id ? <ChevronUp /> : <ChevronDown />}
            </div>

            {/* Danh s√°ch quy·ªÅn */}
            {expandedUser === user.id && (
              <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-2">
                {permissionsData.map((perm) => {
                  const hasPermission = user.permissions?.some(
                    (p) => p.name === perm.name
                  );

                  return (
                    <div
                      key={perm.id}
                      className="flex items-center space-x-2"
                      title={
                        isSuperAdmin
                          ? "Super Admin - kh√¥ng th·ªÉ ch·ªânh s·ª≠a"
                          : hasPermission
                          ? "ƒê√£ c√≥ quy·ªÅn n√†y"
                          : ""
                      }
                    >
                      <input
                        type="checkbox"
                        checked={hasPermission}
                        // S·ª¨A ƒêI·ªÄU KI·ªÜN DISABLED N·∫æU B·∫†N MU·ªêN G·ª† QUY·ªÄN
                        disabled={isSuperAdmin} 
                        onChange={() =>
                           handleCheckboxChange(user, perm, hasPermission)
                        }
                        className={`h-4 w-4 rounded ${
                          isSuperAdmin
                            ? "cursor-not-allowed opacity-50"
                            : "cursor-pointer"
                        }`}
                      />
                      <label
                        className={`text-sm ${
                          hasPermission || isSuperAdmin
                            ? "text-gray-400"
                            : "text-gray-800"
                        }`}
                      >
                        {perm.name}
                      </label>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        );
      })}

      {usersData.length === 0 && (
        <p className="text-center text-gray-500 mt-6">
          Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.
        </p>
      )}
    </div>
  );
}